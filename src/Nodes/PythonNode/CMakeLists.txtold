cmake_minimum_required(VERSION 3.5)
set(Module_Name "PythonNode")
project(${Module_Name})
set(CMAKE_CXX_STANDARD 17)
set(MAKE_CXX_STANDARD_REQUIRED ON)

set(QCodeEditor_INCLUDE "${DEPENDS_DIR}/QCodeEditor/include")
INCLUDE_DIRECTORIES(${QCodeEditor_INCLUDE})
set(QCodeEditor_LIBRARIES "${DEPENDS_DIR}/QCodeEditor/build/libQCodeEditor.a")
message("-- Found QCodeEditor ${QCodeEditor_INCLUDE}")

set(PYTHON_ROOT_DIR "${CMAKE_BINARY_DIR}/Python312" )
set(PYTHON_INCLUDE_DIRS "${PYTHON_ROOT_DIR}/include")
set(PYTHON_LIBRARIES "${PYTHON_ROOT_DIR}/libs")
set(PYTHON_EXECUTABLE "${PYTHON_ROOT_DIR}/python.exe")
LINK_DIRECTORIES(${PYTHON_LIBRARIES})
INCLUDE_DIRECTORIES(${PYTHON_INCLUDE_DIRS})
find_package(Python3 REQUIRED COMPONENTS Interpreter Development)
message("-- Found Python312  ${CMAKE_BINARY_DIR}")

set(pybind11_DIR "${PYTHON_ROOT_DIR}/Lib/site-packages/pybind11/share/cmake/pybind11")
set(pybind11_INCLUDE_DIRS "${PYTHON_ROOT_DIR}/Lib/site-packages/pybind11/include/pybind11")
find_package(pybind11 REQUIRED HINTS "${Python3_SITELIB}")
INCLUDE_DIRECTORIES(${pybind11_INCLUDE_DIRS})
find_package(pybind11 REQUIRED)
find_package(Qt${QT_VERSION_MAJOR} REQUIRED COMPONENTS Widgets)

add_library(${Module_Name} SHARED
        PythonNodeModel.hpp
        PluginDefinition.cpp
        PluginDefinition.hpp
        PythonScriptInterface.hpp
        CodeEditor.cpp
        CodeEditor.hpp
        myQtModule.hpp
)

add_subdirectory("pybind11-2.13.6")
target_link_libraries(${Module_Name} PRIVATE Qt${QT_VERSION_MAJOR}::Widgets ${QtNodes_LIBRARIES} python312 ${QCodeEditor_LIBRARIES})
# Add pybind11 module
pybind11_add_module(PythonDataModel myQtModule.hpp)
#target_link_libraries(qtmodule PRIVATE  Qt${QT_VERSION_MAJOR}::Core)

target_compile_definitions(${Module_Name} PRIVATE UNTITLED_LIBRARY)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/plugins")
SET_TARGET_PROPERTIES(${Module_Name} PROPERTIES LINKER_LANGUAGE C
        ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}
        RUNTIME_OUTPUT_DIRECTORY ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}
        LIBRARY_OUTPUT_DIRECTORY ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}
        PREFIX ""
        SUFFIX ".node")
